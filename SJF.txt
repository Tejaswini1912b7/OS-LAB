AIM  :  To write a C program for implementation of SJF Algorithm

ALGORITHM:
START
	Step 1: Declare the required variables.
	Step 2: Read the processes and their priorities.

STOP

CODE:
// SJF - Shortest Job First
#include<stdio.h>
void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}
void sort_timings(int process[], int p)
{
    int i, j, minimum;
    for(i = 0; i < p; i++)
    {
        minimum = i;
        for(j = i + 1; j < p; j++)
        {
            if(process[j] < process[minimum])
            {
                minimum = j;
            }
        }
        swap(&process[minimum], &process[i]);
    }
}
int main()
{
    int waiting[20] = {0}, process[20], finishing[20], i, p;
    float avg_waiting = 0, avg_finishing = 0;
    printf("Enter Total Number of Processes : ");
    scanf("%d", &p);
    printf("Enter Burst Times of %d Processes \n",p);
    for(i = 0; i < p; i++)
    {
        printf("P[%d] : ", i + 1);
        scanf("%d", &process[i]);
    }
    sort_timings(process, p);
    printf("\nBurst Times after sorting\n");
    for(i = 0; i < p; i++)
    {
        printf("P[%d] : %d\n", i + 1, process[i]);
    }
    for(i = 1; i < p; i++)
    {
        waiting[i] = process[i-1] + waiting[i-1];
    }
    for(i = 0; i < p; i++)
    {
        finishing[i] = process[i] + waiting[i];
    }
    for(i = 0; i < p; i++)
    {
        avg_waiting += waiting[i];
    }
    avg_waiting = avg_waiting / p;
    for(i = 0; i < p; i++)
    {
        avg_finishing += finishing[i];
    }
    avg_finishing = avg_finishing / p;
    printf("\n           BURST TIME  WAITING TIME  FINISHING TIME   for %d Processes are : \n",p);
    for(i = 0; i < p; i++)
    {
        printf("P[%d] : %7d%14d%14d\n", i + 1, process[i], waiting[i], finishing[i]);
    }
    printf("\nAverage Waiting Time is    : %.2f", avg_waiting);
    printf("\nAverage Finishing Time is  : %.2f", avg_finishing);
    return 0;
}
