BANKERS ALGORITHM :
Introduction :
	It is a banker algorithm used to avoid deadlock and allocate resources safely to each process in the computer system. The 'S-State' examines all possible tests or activities before deciding whether the allocation should be allowed to each process. It also helps the operating system to successfully share the resources between all the processes. The banker's algorithm is named because it checks whether a person should be sanctioned a loan amount or not to help the bank system safely simulate allocation resources.

Algorithm :
START
	Input n as 5 and m as 3 where n is no.of processes and m is resources count.
	Declare and Initialize the 2D arrays 'alloc', 'max', 'available' with the values.
	Initialise Finish Array(f) as a frequency array.
	Initialise need array and nead = max - alloc
	Now, Based on the need, avail, alloc and flag derive the ans matrix which is the safe sequence. 
STOP

Code :
// Banker's Algorithm
#include<stdio.h>
int main()
{
	int process_count, resource_count, i, j, k;
	// printf("Enter process count and resource count\n");
	// scanf("%d    %d",&process_count, &resource_count);
	process_count = 5; 
	resource_count = 3; 
	int res_alloc[5][3]={{0,1,0},{2,0,0},{3,0,2},{2,1,1},{0,0,2}}; 
	int max[5][3]={{7,5,3},{3,2,2},{9,0,2},{2,2,2},{4,3,3}}; 
	int res_avail[3]={3,3,2}; 

	int f[process_count], result[process_count], index=0;
	for(k = 0; k < process_count; k++) 
	{
		f[k] = 0;
	}
	int need[process_count][resource_count];
	for(i = 0; i < process_count; i++) 
	{
		for (j = 0; j < resource_count; j++)
			need[i][j] = max[i][j] - res_alloc[i][j];
	}
	int y = 0;
	for(k = 0; k < process_count; k++) 
	{
		for(i = 0; i < process_count; i++) 
		{
			if(f[i] == 0) 
			{
				int flag = 0;
				for(j = 0; j < resource_count; j++)
				{
					if(need[i][j] > res_avail[j])
					{
						flag = 1;
						break;
					}
				}
				if(flag == 0)
				{
					result[index++] = i;
					for(y = 0; y < resource_count; y++)
						res_avail[y] += res_alloc[i][y];
					f[i] = 1;
				}
			}
		}
	}
	printf("THE SAFE SEQUENCE is as follows : \n");
	for(i = 0; i < process_count - 1; i++)
		printf(" P%d ->", result[i]);
	printf(" P%d", result[process_count - 1]);
	return 0;
}

OUTPUT :
https://github.com/Tejaswini1912b7/OS-LAB/blob/main/B7_Banker's_Algo_OUTPUT.png
