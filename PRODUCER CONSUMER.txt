Aim : To write a C program to Implement Producer-Consumer Algorithm (also called Bounded Buffer)

Algorithm :
START
	Initialise mutex as 1, full as 0, empty as 2, x as 0 
	Define two functions producer() and other as consumer() and write the code.
	In the main function, use a switch case to implement producer or consumer as per the user's request.
	If mutex == 1 and empty != 0 we call producer() or consumer()
STOP

Code :
// Producer Consumer Algorithm
#include<stdio.h>
#include<stdlib.h>
int mutex = 1, full = 0, empty = 2, x = 0;
void producer()
{
	--mutex;
	++full;
	--empty;
	x++;
	printf("Producer produces item %d\n", x);
	++mutex;
}

void consumer()
{
	--mutex;
	--full;
	++empty;
	printf("Consumer consumes item %d\n", x);
	x--;
	++mutex;
}

int main()
{
	int n, i;
	printf("1. Press 1 for Producer\n2. Press 2 for Consumer\n3. Press 3 for Exit");
    #pragma omp critical
	for(i = 1; i > 0; i++)
	{
	    printf("\nEnter your choice : ");
	    scanf("%d", &n);
	    switch(n)
	    {
	        case 1:
	        	if((mutex == 1) && (empty != 0))
	    	    	producer();
	    	    else
	    		    printf("Buffer is full!\n");
	    	    break;
	        case 2:
	    	    if((mutex == 1) && (full != 0))
	    		    consumer();
	    	    else
	    		    printf("Buffer is empty!\n");
	    	    break;
	        case 3:
	    	    exit(0);
	    	    //break;
	    }
	}
}

